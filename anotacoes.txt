Código Limpo & Arquitetura Limpa

SOLID:
S => SRP: Single Responsabily Principle
O => OCP: Open-Closed Principle
L => LSP: Liskov Substitution Principle
I => ISP: Interface Segreation Principle
D => DIP: Dependency Inversion Principle 

# Single Responsabily Principle #
- fazer com que cada coisa faça uma única coisa(a ideia primordial dela)
- o módulo deve ter uma, e apenas uma razão para ele mudar

# Dependency Inversion Principle #
- esse princípio diz que o código que implementa uma política de alto nível não deve depender do 
  código que implementa detalhes de baixo nível 
- Ou seja, serviços não precisam saber dos dados do repository e tudo mais...

# Liskov Substitution Principle #
- Barbara Liskov => pessoa que inventou esse princípio 
- Uncle Bob diz que objetos podem ser substituídos por seus subtipos sem que isso afete
  a execução correta do programa

-----------------------------------------------------------------------------
# Docker #
- ferramenta para criação de containers
- container: ambiente isolado 
- imagens: instruções para criação de um container
- o que roda localmente, roda em produção
- mesmo SO, compartilhando recursos da máquina HOST

- o docker vai basicamente pegar a imagem que a gente tá querendo criar, e depois vai criar uma ponte entre o sistema operacional que estamos querendo usar e o container
- essa parte de DOCKER fica mais relacionado com a parte de INFRA, mas é bom o dev saber também

----------------------------------------------------------------------------
O que são os ORMS?
MODEL <-> ORM <-> Banco de dados
Sequelize é um ORM também, enquanto que o Knex é um queryBuilder